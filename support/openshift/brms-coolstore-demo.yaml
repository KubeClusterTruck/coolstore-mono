apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: brms-coolstore-demo
objects:
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: brms-coolstore-demo
  spec:
    host: brms-coolstore-demo-coolstore-mono.apps.c7.core.rht-labs.com
    path: /brms-coolstore-demo/
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: brms-coolstore-demo
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-11-16T18:57:37Z
        status: "True"
        type: Admitted
      host: brms-coolstore-demo-coolstore-mono.apps.c7.core.rht-labs.com
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    host: jenkins-coolstore-mono.apps.c7.core.rht-labs.com
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-11-16T18:47:47Z
        status: "True"
        type: Admitted
      host: jenkins-coolstore-mono.apps.c7.core.rht-labs.com
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: brms-coolstore-demo
    name: brms-coolstore-demo
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 9990-tcp
      port: 9990
      protocol: TCP
      targetPort: 9990
    - name: 9999-tcp
      port: 9999
      protocol: TCP
      targetPort: 9999
    selector:
      deploymentconfig: brms-coolstore-demo
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace":
        "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins-jnlp
  spec:
    ports:
    - name: agent
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: brms-coolstore-app
    name: brms-coolstore-app
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: brms-coolstore-demo:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /support/docker-OCP-app
      git:
        uri: https://github.com/mono2micro/coolstore-mono.git
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: brms-coolstore-base:latest
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: h3b_6MLF7MlXra8YCplG
      type: GitHub
    - generic:
        secret: XPjyO6uEPnJrUAWuLg1K
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "brms-coolstore-demo", "namespace":
        "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: coolstore-mono-mvn-pipeline
    name: coolstore-mon-mvn-pipeline
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="brms-coolstore-demo"
                def project=""

                node {
                  stage("Initialize") {
                    project = "brms-coolstore-demo"
                  }
                }

                node {

                  stage("Build Coolstore Monolith Application Image") {
                    // *** Uncomment for 1st Run *** if Lab 1 was skipped
                    // sh "mvn clean fabric8:deploy -Popenshift --file lab/pom.xml"
                    //sh "mvn clean package -Popenshift --file lab/pom.xml"
                    //stash name:"jar", includes:"lab/target/product-catalog.jar"
                    sh "echo '***** Starting docker App Build Here *****'"
                    openshiftBuild apiURL: '', authToken: '', bldCfg: 'brms-coolstore-app', buildName: '', checkForTriggeredDeployments: 'false', commitID: '', namespace: '', showBuildLogs: 'false', verbose: 'false', waitTime: '', waitUnit: 'sec'
                  }
                }

                node {
                  stage("Deploy Coolstore Image") {
                    openshiftDeploy deploymentConfig: "brms-coolstore-demo"
                  }
                  stage("Smoke Test Coolstore") {
                    sh 'curl http://brms-coolstore-demo-coolstore-mono.apps.c7.core.rht-labs.com/brms-coolstore-demo/ | grep -i "<title>Red Hat Cool Store</title>"'
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
          node {
            stage("Tag and Release Image") {
              input "Promote next Release"
              openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: 'brms-coolstore-demo', destTag: 'next-release', destinationAuthToken: '', destinationNamespace: '', namespace: '', srcStream: 'brms-coolstore-demo', srcTag: 'latest', verbose: 'false'
            }
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: brms-coolstore-demo
    name: brms-coolstore-demo
  spec:
    replicas: 1
    selector:
      app: brms-coolstore-demo
      deploymentconfig: brms-coolstore-demo
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: brms-coolstore-demo
          deploymentconfig: brms-coolstore-demo
      spec:
        containers:
        - image: docker-registry.default.svc:5000/coolstore-mono/brms-coolstore-demo@sha256:262e32d0ea3e470d0de97861ff64213fd53ab828c24070de076b74675e0112c8
          imagePullPolicy: Always
          name: brms-coolstore-demo
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 9990
            protocol: TCP
          - containerPort: 9999
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /brms-coolstore-demo/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: "1"
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - brms-coolstore-demo
        from:
          kind: ImageStreamTag
          name: brms-coolstore-demo:latest
          namespace: coolstore-mono
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    generation: 1
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: jenkins
      spec:
        containers:
        - env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: "true"
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: OPENSHIFT_JENKINS_JVM_ARCH
            value: i386
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          image: registry.access.redhat.com/openshift3/jenkins-2-rhel7@sha256:c2e5ffc909fc598628caebe56571849cbcbeea6c99f885a9870cb8c5967d5111
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 420
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: jenkins
        serviceAccountName: jenkins
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: jenkins-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
