apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "coolstore-mono", "namespace": "",
      "kind": "DeploymentConfig"}]'
  labels:
    name: coolstore-mono-mvn-pipeline
  name: coolstore-mon-mvn-pipeline
spec:
  nodeSelector: null
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |
        try {
           timeout(time: 20, unit: 'MINUTES') {
              def appName="brms-coolstore-demo"
              def project=""

              node {
                stage("Initialize") {
                  project = "brms-coolstore-demo"
                }
              }

              node("maven") {
                stage("Checkout") {
                  git url: "https://github.com/ghoelzer-rht/ocp-rhoar-spring.git", branch: "master"
                }

                stage("Build Base JBoss EAP/BRMS Image") {
                  // *** Uncomment for 1st Run *** if Lab 1 was skipped
                  // sh "mvn clean fabric8:deploy -Popenshift --file lab/pom.xml"
                  //sh "mvn clean package -Popenshift --file lab/pom.xml"
                  //stash name:"jar", includes:"lab/target/product-catalog.jar"
                  sh "echo '***** Docker Build 1 Goes Here *****'"
 
                stage("Build Coolstore Monolith Application Image") {
                  // *** Uncomment for 1st Run *** if Lab 1 was skipped
                  // sh "mvn clean fabric8:deploy -Popenshift --file lab/pom.xml"
                  //sh "mvn clean package -Popenshift --file lab/pom.xml"
                  //stash name:"jar", includes:"lab/target/product-catalog.jar"
                  sh "echo '***** Docker Build 2 Goes Here *****'"
 
                }
              }

              node {
                stage("Deploy Coolstore Image") {
                  openshiftDeploy deploymentConfig: "brms-coolstore-demo"
                }
                stage("Smoke Test Coolstore") {
                  sh 'curl http://product-catalog-spring-rhoar-lab01.cloudapps.keyvan.com/admin/productlist | grep -i "Admin - Product List"'
                }
              }
           }
        } catch (err) {
           echo "in catch block"
           echo "Caught: ${err}"
           currentBuild.result = 'FAILURE'
           throw err
        }
        node {
          stage("Tag and Release Image") {
            input "Promote next Release"
            openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: 'brms-coolstore-demo', destTag: 'next-release', destinationAuthToken: '', destinationNamespace: '', namespace: '', srcStream: 'brms-coolstore-demo', srcTag: 'latest', verbose: 'false'
          }
        }
    type: JenkinsPipeline
  triggers:
  - github:
      secret: secret101
    type: GitHub
  - generic:
      secret: secret101
    type: Generic
